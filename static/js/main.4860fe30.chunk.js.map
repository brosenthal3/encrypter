{"version":3,"sources":["components/title/title.component.js","components/button/button.component.js","pages/select-page/select-page.page.js","components/encrypt-decrypt-form/encrypt-decrypt-form.component.js","components/answer/answer.component.js","pages/encrypt-page/encrypt-page.page.js","pages/decrypt-page/decrypt-page.page.js","components/credits/credits.component.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","Button","clickHandler","color","font","onClick","SelectPage","to","React","Component","EncryptDecryptForm","this","props","title","type","name","placeholder","min","max","onChange","handleChange","handleSubmit","Answer","copyText","toCopy","text","newTextarea","document","createElement","value","body","appendChild","focus","select","execCommand","removeChild","show","textIs","EncryptPage","key","state","alert","asciiCode","asciiEncrypted","encryptedCode","encryptedText","textArray","split","i","length","charCodeAt","push","asciiToText","String","fromCharCode","finished","join","setState","answerText","showAnswer","e","target","DecryptPage","asciiCodeD","asciiDecrypted","decryptedCode","decryptedText","textArrayD","asciiTotext","Credits","href","App","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4860fe30.chunk.js","sourcesContent":["import React from 'react';\r\nimport './title.scss';\r\n\r\nexport const Title = ({children}) => {\r\n    return(\r\n        <h1 className=\"title\">{children}</h1>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './button.scss';\r\n\r\nexport const Button = ({children, clickHandler, color, font}) => {\r\n    return(\r\n        <button className={`${color} customButton ${font}`} onClick={clickHandler}>{children}</button>\r\n    )\r\n}","import React from 'react';\r\nimport {Link } from 'react-router-dom';\r\n\r\nimport {Title} from '../../components/title/title.component';\r\nimport { Button } from '../../components/button/button.component';\r\n\r\nclass SelectPage extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Title>Encrypted - Encrypt and Decrypt Text</Title>\r\n                <Link to=\"/encrypt\"><Button color=\"green\">Encryption</Button></Link>\r\n                <Link to=\"/decrypt\"><Button color=\"green\">Decryption</Button></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectPage;","import React from 'react';\r\nimport { Button } from '../button/button.component';\r\nimport {Title} from '../title/title.component';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './encrypt-decrypt-form.scss';\r\n\r\nclass EncryptDecryptForm extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"form\">\r\n                <Title>{this.props.title}</Title>\r\n                <Link to=\"/\"><Button color=\"grey\">Back</Button></Link>\r\n                <input type=\"number\" name=\"key\"placeholder=\"Key\" min=\"1\" max=\"40\" className=\"input-field\" onChange={this.props.handleChange} />\r\n                <textarea placeholder=\"Write Down Your Text Here\" className=\"input-field\" name=\"text\" onChange={this.props.handleChange}></textarea>\r\n                <Button color=\"green\" clickHandler={this.props.handleSubmit}>Submit</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EncryptDecryptForm;","import React from 'react';\r\nimport './answer.scss';\r\nimport { Button } from '../button/button.component';\r\n\r\nexport class Answer extends React.Component {\r\n    copyText = () => {\r\n        let toCopy = this.props.text;\r\n        let newTextarea = document.createElement('textArea');\r\n        newTextarea.value = toCopy;\r\n        document.body.appendChild(newTextarea);\r\n        newTextarea.focus();\r\n        newTextarea.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(newTextarea);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={this.props.show ? `show` : `hide`}>\r\n                <p>\r\n                    The {this.props.textIs} Text is:\r\n                    <br />\r\n                    <span className=\"answer\">{this.props.text}</span>\r\n                    <br />\r\n                    <Button color=\"dark-grey\" font=\"small\" clickHandler={this.copyText}>Copy Text</Button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport EncryptDecryptForm from '../../components/encrypt-decrypt-form/encrypt-decrypt-form.component';\r\nimport {Answer} from '../../components/answer/answer.component';\r\n\r\nexport class EncryptPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            key: 0,\r\n            text: '',\r\n            showAnswer: false,\r\n            answerText: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = () => {\r\n\r\n        const key = this.state.key;\r\n        const text = this.state.text;\r\n\r\n        if (key > 40) alert('Enter a key below 40 please') \r\n        else { \r\n            let encryptedCode=[];\r\n            let encryptedText=[];\r\n            let asciiCode;\r\n            let asciiEncrypted;\r\n    \r\n            //split the text into an array\r\n            let textArray = text.split('');\r\n    \r\n            //loop through all characters of the array\r\n            for (let i = 0; i < textArray.length; i++){\r\n                \r\n                //Transform each character to it's ascii code\r\n                asciiCode = textArray[i].charCodeAt(0);\r\n    \r\n                if (asciiCode%2 > 0) {\r\n                    //if the ascii code isn't even - remove n (value of key) from it\r\n                    asciiEncrypted = asciiCode- +key;\r\n                } else{\r\n                    //if it is even - add n (value of key) to it\r\n                    asciiEncrypted = asciiCode+ +key;\r\n                }\r\n                //add each (encrypted) ascii code to an array\r\n                encryptedCode.push(asciiEncrypted);\r\n            }\r\n    \r\n            //transform each ascii code to it's character\r\n            for (let i = 0; i < encryptedCode.length; i++){\r\n                 \r\n                let asciiToText = String.fromCharCode(encryptedCode[i]);\r\n                \r\n                //add each new character to another array that contains the encrypted characters\r\n                encryptedText.push(asciiToText);\r\n            }\r\n            //make a string out of the array of the encrypted characters\r\n            let finished = encryptedText.join('');\r\n\r\n            this.setState({answerText: finished});\r\n            this.setState({showAnswer: true});\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    \r\n    render(){\r\n        const answerText = this.state.answerText;\r\n        return(\r\n            <div>\r\n                <EncryptDecryptForm title=\"Encrypt Text\" handleSubmit={this.handleSubmit} handleChange={this.handleChange} />\r\n                <Answer show={this.state.showAnswer} text={answerText} textIs=\"Encrypted\" />\r\n            </div>\r\n            \r\n        )\r\n    } \r\n}","import React from 'react';\r\n\r\nimport EncryptDecryptForm from '../../components/encrypt-decrypt-form/encrypt-decrypt-form.component';\r\nimport { Answer } from '../../components/answer/answer.component';\r\n\r\nexport class DecryptPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            key: 0,\r\n            text: '',\r\n            showAnswer: false,\r\n            answerText: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        //declare all needed variables\r\n        const key = this.state.key;\r\n        const text = this.state.text;\r\n\r\n        let decryptedCode=[];\r\n        let decryptedText=[];\r\n        let asciiCodeD;\r\n        let asciiDecrypted;\r\n\r\n        //split the text intro an array\r\n        let textArrayD=text.split('');\r\n\r\n        for (let i = 0; i < textArrayD.length; i++){\r\n            \r\n            //Transform each character into it's ascii code\r\n            asciiCodeD = textArrayD[i].charCodeAt(0);\r\n\r\n            //check if the key is even or odd\r\n            if (key%2 === 0) {\r\n                if ((asciiCodeD-key)%2 > 0) {\r\n                    //if it it's odd - add n (value of key) to the code\r\n                    asciiDecrypted = asciiCodeD+ +key;\r\n                } else{\r\n                    //if it is even - remove n (value of key) from the code\r\n                    asciiDecrypted = asciiCodeD- +key;\r\n                }\r\n            }else{\r\n                if ((asciiCodeD-key)%2 > 0) {\r\n                    //if it it's odd - remove n (value of key) to the code\r\n                    asciiDecrypted = asciiCodeD+ +key;\r\n                } else{\r\n                    //if it is even - add n (value of key) from the code\r\n                    asciiDecrypted = asciiCodeD- +key;\r\n                }\r\n            }\r\n            //add each (decrypted) ascii to an array\r\n            decryptedCode.push(asciiDecrypted);\r\n        }\r\n\r\n        //transform each ascii code to it's character\r\n        for (let i = 0; i < decryptedCode.length; i++){\r\n            let asciiTotext = String.fromCharCode(decryptedCode[i]);\r\n            //add the decrypted character to an array\r\n            decryptedText.push(asciiTotext);\r\n        }\r\n\r\n        //make a string out of the array of the decrypted characters\r\n        let finished = decryptedText.join('');\r\n\r\n        this.setState({answerText: finished});\r\n        this.setState({showAnswer: true});\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    \r\n    render(){\r\n        const answerText = this.state.answerText;\r\n        return(\r\n            <div>\r\n                <EncryptDecryptForm title=\"Decrypt Text\" handleSubmit={this.handleSubmit} handleChange={this.handleChange} />\r\n                <Answer show={this.state.showAnswer} text={answerText} textIs=\"Decrypted\" />\r\n            </div>\r\n            \r\n        )\r\n    } \r\n}","import React from 'react';\r\nimport './credits.scss';\r\n\r\nexport const Credits = () => {\r\n    return(\r\n        <small className=\"muted-text credits\">Made by Ben Rosenthal. Visit <a href=\"https://ikbenben.com\">ikbenben.com</a> for more.</small>\r\n    )\r\n}","import React from 'react';\nimport './App.scss';\nimport {HashRouter, Route} from 'react-router-dom';\n\nimport SelectPage from './pages/select-page/select-page.page';\nimport {EncryptPage} from './pages/encrypt-page/encrypt-page.page';\nimport {DecryptPage} from './pages/decrypt-page/decrypt-page.page';\nimport {Credits} from './components/credits/credits.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"page\">\n        <Credits />\n        <HashRouter basename='/'>\n            <Route path=\"/\" exact component={SelectPage} />\n            <Route path=\"/decrypt\" exact component={DecryptPage} />\n            <Route path=\"/encrypt\" exact component={EncryptPage} />\n        </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}